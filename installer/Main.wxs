<?xml version="1.0" encoding="UTF-8"?>
<!--
Created by Artem Boldariev <artem.boldarev@gmail.com>, 2018.
This file is distributed under the terms of CC0 license (Public Domain).

See the 'LICENSE.txt' file for the additional details.
-->

<!--
Helpful WEB-pages about WiX:
    http://weblogs.sqlteam.com/mladenp/archive/2010/02/17/WiX-3-Tutorial-Understanding-main-WXS-and-WXI-file.aspx
    http://p-nand-q.com/programming/windows/wix/files.html
    https://github.com/sbcl/sbcl/blob/master/tools-for-build/wxs.lisp
    https://helgeklein.com/blog/2014/09/real-world-example-wix-msi-application-installer/
    https://blogs.technet.microsoft.com/alexshev/2008/02/10/from-msi-to-wix/

Using 'dark.exe' *.msi decompiler seems to be the most efficient way to learn about WiX. Decompiling SBCL's installer and 7-zip's installer revealed a lot of useful information.
-->

<!-- installer configuration -->
<?include Config.wxi ?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
  <Product Id="*"
           Name="$(var.ProductName) $(var.VersionNumber)"
           Language="$(var.Language)"
           Version="$(var.VersionNumber)"
           Manufacturer="$(var.ManufacturerName)"
           UpgradeCode="$(var.UpgradeCode)">
    <!-- Package installer version and installation scope. Media definition. -->
    <Package InstallerVersion="301"
             Platform="$(var.Platform)"
             Compressed="yes"
             />
    <Media Id="1"
           Cabinet="data.cab"
           EmbedCab="yes" />
    <!--
        For dual purpose installers
        Requires WixUI_Advanced Dialog Set
        See also:
        https://docs.microsoft.com/ru-ru/windows/win32/msi/single-package-authoring?redirectedfrom=MSDN
        https://stackoverflow.com/questions/52707573/hide-features-based-on-allusers-msiinstallperuser
        https://wixtoolset.org//documentation/manual/v3/wixui/dialog_reference/wixui_advanced.html
        http://windows-installer-xml-wix-toolset.687559.n2.nabble.com/dual-purpose-installer-ALLUSERS-2-and-Bootstrapper-td7591740.html
        http://www.joyofsetup.com/2008/04/01/new-wix-feature-setting-package-installation-scope/
        https://blogs.msdn.microsoft.com/astebner/2007/11/18/using-wix-3-0-to-create-a-per-user-msi-that-does-not-prompt-for-elevation-on-windows-vista/
    -->
	<?if $(var.PerUserSupport) = "yes" ?>
    <Property Id="ALLUSERS" Value="2" />
    <Property Id="MSIINSTALLPERUSER" Value="{}" />
	<?else?>
	<Property Id="ALLUSERS" Value="1" />
	<WixVariable Id="WixUISupportPerUser" Value="0" />
	<?endif?>
	<!-- Try to install per-machine by default -->
	<Property Id="WixAppFolder" Value="WixPerMachineFolder" />
    <Property Id="ApplicationFolderName" Value="$(var.ProductName)" />
    <!-- Icon in Add/Remove programs -->
    <?ifdef ProductIconFile ?>
    <Icon Id="ProductIcon.ico" SourceFile="$(var.ProductIconFile)" />
    <Property Id="ARPPRODUCTICON" Value="ProductIcon.ico" />
    <?endif?>
    <!-- specify license file -->
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />
    <!-- Upgrade settings -->
    <Upgrade Id="$(var.UpgradeCode)">
      <UpgradeVersion OnlyDetect="yes"
                      Minimum="$(var.VersionNumberWithRevision)"
                      IncludeMinimum="no"
                      Property="NEWER_VERSION_FOUND" />
      <!--
          We need 'IncludeMaximum=yes' to treat
          the same version installation as upgrade (reinstallation).
          Microsoft does not recommend it.
          It is very useful during development though.
          Unfortunately, then we should suppress
          light.exe's warning 1076.
      -->
      <UpgradeVersion Minimum="0.0.0.0"
                      IncludeMinimum="yes"
                      Maximum="$(var.VersionNumberWithRevision)"
                      IncludeMaximum="yes"
                      Property="OLDER_VERSION_FOUND" />
    </Upgrade>

    <!-- Install only on Windows XP SP3 or newer -->
    <Condition Message="Your operating system version is not supported. Windows XP SP3 or newer is required.">
      <![CDATA[Installed OR (((VersionNT > 501) OR ((VersionNT = 501) AND (ServicePackLevel >= 3))) AND MsiNTProductType = 1)]]>
    </Condition>

    <!-- Installation sequence description -->
    <CustomAction Id="NewerVersionFound" Error="A newer version of $(var.ProductName) is installed." />
    <InstallExecuteSequence>
      <!-- Check for newer versions with FindRelatedProducts and execute the custom action after it -->
      <Custom Action="NewerVersionFound" After="FindRelatedProducts">
        <![CDATA[NEWER_VERSION_FOUND]]>
      </Custom>
      <!-- Remove the previous versions of the product -->
      <RemoveExistingProducts After="InstallInitialize"/>
      <!-- WixCloseApplications is a built in custom action that uses util:CloseApplication below -->
      <Custom Action="WixCloseApplications" Before="InstallInitialize" />
    </InstallExecuteSequence>
    <!-- Close installed applications -->
    <?ifdef GuiProcessName ?>
    <util:CloseApplication Id="CloseGuiApplication"
                           CloseMessage="yes"
                           Description="The GUI process must be closed before installation."
                           ElevatedCloseMessage="no"
                           RebootPrompt="no"
                           Target="$(var.GuiProcessName)" />
    <?endif?>
    <?ifdef ConsoleProcessName ?>
    <util:CloseApplication Id="CloseConsoleApplication"
                           CloseMessage="yes"
                           Description="The console process must be closed before installation."
                           ElevatedCloseMessage="no"
                           RebootPrompt="no"
                           Target="$(var.ConsoleProcessName)" />
    <?endif?>
	<!-- Installation GUI description. -->
    <UI Id="ProductInstallationUI">
      <!-- These dialog references are needed for CloseApplication above to work correctly -->
      <DialogRef Id="FilesInUse" />
      <DialogRef Id="MsiRMFilesInUse" />
      <!-- Here we'll add the GUI logic for installation and updating in a future post-->
	  <?if $(var.PerUserSupport) = "yes" ?>
      <Publish Dialog="InstallScopeDlg" Control="Next" Property="MSIINSTALLPERUSER" Value="{}" Order="2"><![CDATA[WixAppFolder = "WixPerMachineFolder"]]></Publish>
	  <Publish Dialog="InstallScopeDlg" Control="Next" Property="MSIINSTALLPERUSER" Value="1" Order="3"><![CDATA[WixAppFolder = "WixPerUserFolder"]]></Publish>
	  <?endif?>
	  <!-- <UIRef Id="WixUI_InstallDir" /> -->
	  <?if $(var.PerUserSupport) = "yes" ?>
	  <UIRef Id="WixUI_Advanced" />
	  <?else?>
	  <UIRef Id="WixUI_FeatureTree" />
	  <?endif?>
    </UI>
	<UIRef Id="ProductInstallationUI" />
    <Directory Id="TARGETDIR" Name="SourceDir">
      <!-- Menu directory structure -->
      <Directory Id="ProgramMenuFolder">
        <Directory Id="ProgramMenuDir"
                   Name="$(var.ProductName)">
        </Directory>
      </Directory>
      <!-- Desktop Directory -->
      <Directory Id="DesktopFolder">
        <Directory Id="DesktopDir">
        </Directory>
      </Directory>
      <!-- Quick Launch Directory -->
      <!-- <Directory Id="AppDataFolder"> -->
      <!--   <Directory Id="Microsoft" Name="Microsoft"> -->
      <!--     <Directory Id="InternetExplorer" Name="Internet Explorer"> -->
      <!--       <Directory Id="QuickLaunchDir" Name="Quick Launch" /> -->
      <!--     </Directory> -->
      <!--   </Directory> -->
      <!-- </Directory> -->
      <!-- Program installation directory structure -->
      <?if $(var.Win64) = "yes" ?>
      <Directory Id="ProgramFiles64Folder">
        <Directory Id="APPLICATIONFOLDER"
                   Name="$(var.ProductName)">
        </Directory>
      </Directory>
      <?else?>
      <Directory Id="ProgramFilesFolder">
        <Directory Id="APPLICATIONFOLDER"
                   Name="$(var.ProductName)">
        </Directory>
      </Directory>
      <?endif?>
      <!-- conditionally include Visual Studio C++ Runtime Files -->
	  <?if $(var.PerUserSupport) = "yes" ?>
      <?ifdef VCRedist ?>
      <Merge Id="VCRedist_CRT" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_CRT_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?if $(var.VCRedist_MFC) = "yes" ?>
      <Merge Id="VCRedist_MFC" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_MFC_$(var.Platform).msm" DiskId="1" Language="0"/>
      <Merge Id="VCRedist_MFCLOC" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_MFCLOC_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?endif?>
      <?if $(var.VCRedist_OpenMP) = "yes" ?>
      <Merge Id="VCRedist_OpenMP" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_OpenMP_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?endif?>
      <?if $(var.VCRedist_CXXAMP) = "yes" ?>
      <Merge Id="VCRedist_CXXAMP" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_CXXAMP_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?endif?>
      <?endif?>
	  <?endif?>
    </Directory>

    <?ifdef MSIFASTINSTALL?>
    <Property Id="MSIFASTINSTALL">$(var.MSIFASTINSTALL)</Property>
    <?endif?>

    <!-- Save and restore APPLICATIONFOLDER -->
    
    <!-- 
         Save the command line value APPLICATIONFOLDER and restore it later in the sequence or
         it will be overwritten by the value saved to the registry during an upgrade.
         http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/
    -->
    <CustomAction Id="SaveCmdLineValueAPPLICATIONFOLDER"
                  Property="CMDLINE_APPLICATIONFOLDER"
                  Value="[APPLICATIONFOLDER]"
                  Execute="firstSequence" />
    <CustomAction Id="SetFromCmdLineValueAPPLICATIONFOLDER"
                  Property="APPLICATIONFOLDER"
                  Value="[CMDLINE_APPLICATIONFOLDER]"
                  Execute="firstSequence" />
    <InstallUISequence>
      <Custom Action="SaveCmdLineValueAPPLICATIONFOLDER" Before="AppSearch" />
      <Custom Action="SetFromCmdLineValueAPPLICATIONFOLDER" After="AppSearch">
        CMDLINE_APPLICATIONFOLDER
      </Custom>
    </InstallUISequence>
    <InstallExecuteSequence>
      <Custom Action="SaveCmdLineValueAPPLICATIONFOLDER" Before="AppSearch" />
      <Custom Action="SetFromCmdLineValueAPPLICATIONFOLDER" After="AppSearch">
        CMDLINE_APPLICATIONFOLDER
      </Custom>
    </InstallExecuteSequence>

	<!-- Set install path to the previous installation directory -->
	<?if $(var.PerUserSupport) = "yes" ?>
	<Property Id="APPLICATIONFOLDER_SYSTEM">
      <RegistrySearch Id="RegInstallPathLocalMachine"
                      Type="raw"
                      Root="HKLM"
                      Key="Software\$(var.ManufacturerName)\$(var.ProductName)"
                      Name="Path"
                      Win64="$(var.Win64)"
                      />
	</Property>
	<Property Id="APPLICATIONFOLDER_USER">
      <RegistrySearch Id="RegInstallPathCurrentUser"
                      Type="raw"
                      Root="HKCU"
                      Key="Software\$(var.ManufacturerName)\$(var.ProductName)"
                      Name="Path"
                      Win64="$(var.Win64)"
                      />
	</Property>
	<CustomAction Id="SetPerUserFolder" Property="WixPerUserFolder" Value="[APPLICATIONFOLDER_USER]" Execute="immediate"/>
    <CustomAction Id="SetPerMachineFolder" Property="WixPerMachineFolder" Value="[APPLICATIONFOLDER_SYSTEM]" Execute="immediate"/>
	<CustomAction Id="SetAppFolderPerUser" Property="APPLICATIONFOLDER" Value="[APPLICATIONFOLDER_USER]" Execute="immediate"/>
    <CustomAction Id="SetAppFolderPerMachine" Property="APPLICATIONFOLDER" Value="[APPLICATIONFOLDER_SYSTEM]" Execute="immediate"/>
	<CustomAction Id="EnableMsiInstallPerUser" Property="MSIINSTALLPERUSER" Value="1" Execute="immediate"/>
	<CustomAction Id="SetInstallPerUser" Property="WixAppFolder" Value="WixPerUserFolder" Execute="immediate"/>
    <CustomAction Id="SetInstallPerMachine" Property="WixAppFolder" Value="WixPerMachineFolder" Execute="immediate"/>
	<CustomAction Id="DisablePerUser" Property="ALLUSERS" Value="1" Execute="immediate"/>
	<CustomAction Id="EnablePerUser" Property="ALLUSERS" Value="{}" Execute="immediate"/>
	<InstallExecuteSequence>
      <Custom Action="SetPerUserFolder" After="WixSetDefaultPerMachineFolder"><![CDATA[ACTION="INSTALL" AND APPLICATIONFOLDER_USER <> ""]]></Custom>
      <Custom Action="SetPerMachineFolder" After="SetPerUserFolder"><![CDATA[ACTION="INSTALL" AND APPLICATIONFOLDER_SYSTEM <> ""]]></Custom>
	  <Custom Action="SetInstallPerUser" After="SetPerMachineFolder"><![CDATA[ACTION="INSTALL" AND (APPLICATIONFOLDER_USER <> "" OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND NOT Privileged))]]></Custom>
	  <Custom Action="SetInstallPerMachine" After="SetInstallPerUser"><![CDATA[ACTION="INSTALL" AND ((APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM <> "") OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND Privileged))]]></Custom>

	  <Custom Action="SetAppFolderPerUser" After="SetFromCmdLineValueAPPLICATIONFOLDER"><![CDATA[ACTION="INSTALL" AND APPLICATINFOLDER = "" AND APPLICATIONFOLDER_USER <> ""]]></Custom>
	  <Custom Action="SetAppFolderPerMachine" After="SetAppFolderPerUser"><![CDATA[ACTION="INSTALL" AND APPLICATINFOLDER = "" AND APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM <> ""]]></Custom>
	  <Custom Action="EnableMsiInstallPerUser" After="SetAppFolderPerMachine"><![CDATA[ACTION="INSTALL" AND (APPLICATIONFOLDER_USER <> "" OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND NOT Privileged))]]></Custom>
	  <Custom Action="EnablePerUser" After="EnableMsiInstallPerUser"><![CDATA[ACTION="INSTALL" AND (APPLICATIONFOLDER_USER <> "" OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND NOT Privileged))]]></Custom>
	  <Custom Action="DisablePerUser" After="EnablePerUser"><![CDATA[ACTION="INSTALL" AND ((APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM <> "") OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND Privileged))]]></Custom>
    </InstallExecuteSequence>
	<InstallUISequence>
	  <Custom Action="SetPerUserFolder" After="WixSetDefaultPerMachineFolder"><![CDATA[ACTION="INSTALL" AND APPLICATIONFOLDER_USER <> ""]]></Custom>
      <Custom Action="SetPerMachineFolder" After="SetPerUserFolder"><![CDATA[ACTION="INSTALL" AND APPLICATIONFOLDER_SYSTEM <> ""]]></Custom>
	  <Custom Action="SetInstallPerUser" After="SetPerMachineFolder"><![CDATA[ACTION="INSTALL" AND (APPLICATIONFOLDER_USER <> "" OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND NOT Privileged))]]></Custom>
	  <Custom Action="SetInstallPerMachine" After="SetInstallPerUser"><![CDATA[ACTION="INSTALL" AND ((APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM <> "") OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND Privileged))]]></Custom>

	  <Custom Action="SetAppFolderPerUser" After="SetFromCmdLineValueAPPLICATIONFOLDER"><![CDATA[ACTION="INSTALL" AND APPLICATINFOLDER = "" AND APPLICATIONFOLDER_USER <> ""]]></Custom>
	  <Custom Action="SetAppFolderPerMachine" After="SetAppFolderPerUser"><![CDATA[ACTION="INSTALL" AND APPLICATINFOLDER = "" AND APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM <> ""]]></Custom>
	  <Custom Action="EnableMsiInstallPerUser" After="SetAppFolderPerMachine"><![CDATA[ACTION="INSTALL" AND (APPLICATIONFOLDER_USER <> "" OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND NOT Privileged))]]></Custom>
	  <Custom Action="EnablePerUser" After="EnableMsiInstallPerUser"><![CDATA[ACTION="INSTALL" AND (APPLICATIONFOLDER_USER <> "" OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND NOT Privileged))]]></Custom>
	  <Custom Action="DisablePerUser" After="EnablePerUser"><![CDATA[ACTION="INSTALL" AND ((APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM <> "") OR (APPLICATIONFOLDER_USER = "" AND APPLICATIONFOLDER_SYSTEM = "" AND Privileged))]]></Custom>
	</InstallUISequence>
	<?else?>
	<Property Id="APPLICATIONFOLDER">
      <RegistrySearch Id="RegInstallPathLocalMachine"
                      Type="raw"
                      Root="HKLM"
                      Key="Software\$(var.ManufacturerName)\$(var.ProductName)"
                      Name="Path"
                      Win64="$(var.Win64)"
                      />
    </Property>
	<?endif?>

    <!-- Write Installation Path to registry -->
    <DirectoryRef Id="APPLICATIONFOLDER">
      <Component Id="RegValueProductInstallPath" Guid="*" Win64="$(var.Win64)">
        <RegistryValue Id="RegValueInstallPath"
                       Root="HKMU"
                       Key="Software\$(var.ManufacturerName)\$(var.ProductName)"
                       Name="Path"
                       Value="[APPLICATIONFOLDER]"
                       Type="string"
                       KeyPath="yes"/>
      </Component>
    </DirectoryRef>
    <!-- Features -->
    <Feature Id="RootFeature"
             ConfigurableDirectory="APPLICATIONFOLDER"
             Title="$(var.ProductName)"
             Display="expand"
             Absent="disallow"
             Level="1"
             AllowAdvertise="no">
      <ComponentRef Id="RegValueProductInstallPath" />
      <FeatureGroupRef Id="ProductFeatures" />
    </Feature>
  </Product>
</Wix>

