<?xml version="1.0" encoding="UTF-8"?>
<!--
Created by Artem Boldariev <artem.boldarev@gmail.com>, 2018.
This file is distributed under the terms of CC0 license (Public Domain).

See the 'LICENSE.txt' file for the additional details.
-->

<!--
Helpful WEB-pages about WiX:
    http://weblogs.sqlteam.com/mladenp/archive/2010/02/17/WiX-3-Tutorial-Understanding-main-WXS-and-WXI-file.aspx
    http://p-nand-q.com/programming/windows/wix/files.html
    https://github.com/sbcl/sbcl/blob/master/tools-for-build/wxs.lisp
    https://helgeklein.com/blog/2014/09/real-world-example-wix-msi-application-installer/
    https://blogs.technet.microsoft.com/alexshev/2008/02/10/from-msi-to-wix/

Using 'dark.exe' *.msi decompiler seems to be the most efficient way to learn about WiX. Decompiling SBCL's installer and 7-zip's installer revealed a lot of useful information.
-->

<!-- installer configuration -->
<?include Config.wxi ?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
  <Product Id="*"
           Name="$(var.ProductName) $(var.VersionNumber)"
           Language="$(var.Language)"
           Version="$(var.VersionNumber)"
           Manufacturer="$(var.ManufacturerName)"
           UpgradeCode="$(var.UpgradeCode)">
    <!-- Package installer version and installation scope. Media definition. -->
    <Package InstallerVersion="301"
             Platform="$(var.Platform)"
             Compressed="yes"
             InstallScope="perMachine"/>
    <Media Id="1"
           Cabinet="data.cab"
           EmbedCab="yes" />
    <!-- Icon in Add/Remove programs -->
    <?ifdef ProductIconFile ?>
    <Icon Id="ProductIcon.ico" SourceFile="$(var.ProductIconFile)" />
    <Property Id="ARPPRODUCTICON" Value="ProductIcon.ico" />
    <?endif?>
    <!-- specify license file -->
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />
    <!-- Upgrade settings -->
    <Upgrade Id="$(var.UpgradeCode)">
      <UpgradeVersion OnlyDetect="yes"
                      Minimum="$(var.VersionNumberWithRevision)"
                      IncludeMinimum="no"
                      Property="NEWER_VERSION_FOUND" />
      <!--
          We need 'IncludeMaximum=yes' to treat
          the same version installation as upgrade (reinstallation).
          Microsoft does not recommend it.
          It is very useful during development though.
          Unfortunately, then we should suppress
          light.exe's warning 1076.
      -->
      <UpgradeVersion Minimum="0.0.0.0"
                      IncludeMinimum="yes"
                      Maximum="$(var.VersionNumberWithRevision)"
                      IncludeMaximum="yes"
                      Property="OLDER_VERSION_FOUND" />
    </Upgrade>

    <!-- Install only on Windows XP SP3 or newer -->
    <Condition Message="Your operating system version is not supported. Windows XP SP3 or newer is required.">
      <![CDATA[Installed OR (((VersionNT > 501) OR ((VersionNT = 501) AND (ServicePackLevel >= 3))) AND MsiNTProductType = 1)]]>
    </Condition>

    <!-- Installation sequence description -->
    <CustomAction Id="NewerVersionFound" Error="A newer version of $(var.ProductName) is installed." />
    <InstallExecuteSequence>
      <!-- Check for newer versions with FindRelatedProducts and execute the custom action after it -->
      <Custom Action="NewerVersionFound" After="FindRelatedProducts">
        <![CDATA[NEWER_VERSION_FOUND]]>
      </Custom>
      <!-- Remove the previous versions of the product -->
      <RemoveExistingProducts After="InstallInitialize"/>
      <!-- WixCloseApplications is a built in custom action that uses util:CloseApplication below -->
      <Custom Action="WixCloseApplications" Before="InstallInitialize" />
    </InstallExecuteSequence>
    <!-- Close installed applications -->
    <?ifdef GuiProcessName ?>
    <util:CloseApplication Id="CloseGuiApplication"
                           CloseMessage="yes"
                           Description="The GUI process must be closed before installation."
                           ElevatedCloseMessage="no"
                           RebootPrompt="no"
                           Target="$(var.GuiProcessName)" />
    <?endif?>
    <?ifdef ConsoleProcessName ?>
    <util:CloseApplication Id="CloseConsoleApplication"
                           CloseMessage="yes"
                           Description="The console process must be closed before installation."
                           ElevatedCloseMessage="no"
                           RebootPrompt="no"
                           Target="$(var.ConsoleProcessName)" />
    <?endif?>
    <!-- Installation GUI description. -->
    <!-- <UIRef Id="WixUI_InstallDir" /> -->
    <UIRef Id="WixUI_FeatureTree" />
    <UI>
      <!-- These dialog references are needed for CloseApplication above to work correctly -->
      <DialogRef Id="FilesInUse" />
      <DialogRef Id="MsiRMFilesInUse" />
      <!-- Here we'll add the GUI logic for installation and updating in a future post-->
    </UI>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <!-- Menu directory structure -->
      <Directory Id="ProgramMenuFolder">
        <Directory Id="ProgramMenuDir"
                   Name="$(var.ProductName)">
        </Directory>
      </Directory>
      <!-- Desktop Directory -->
      <Directory Id="DesktopFolder">
        <Directory Id="DesktopDir">
        </Directory>
      </Directory>
      <!-- Quick Launch Directory -->
      <!-- <Directory Id="AppDataFolder"> -->
      <!--   <Directory Id="Microsoft" Name="Microsoft"> -->
      <!--     <Directory Id="InternetExplorer" Name="Internet Explorer"> -->
      <!--       <Directory Id="QuickLaunchDir" Name="Quick Launch" /> -->
      <!--     </Directory> -->
      <!--   </Directory> -->
      <!-- </Directory> -->
      <!-- Program installation directory structure -->
      <?if $(var.Win64) = "yes" ?>
      <Directory Id="ProgramFiles64Folder">
        <Directory Id="INSTALLLOCATION"
                   Name="$(var.ProductName)">
          <Directory Id="INSTALLDIR">
          </Directory>
        </Directory>
      </Directory>
      <?else?>
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLLOCATION"
                   Name="$(var.ProductName)">
          <Directory Id="INSTALLDIR">
          </Directory>
        </Directory>
      </Directory>
      <?endif?>
      <!-- conditionally include Visual Studio C++ Runtime Files -->
      <?ifdef VCRedist ?>
      <Merge Id="VCRedist_CRT" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_CRT_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?if $(var.VCRedist_MFC) = "yes" ?>
      <Merge Id="VCRedist_MFC" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_MFC_$(var.Platform).msm" DiskId="1" Language="0"/>
      <Merge Id="VCRedist_MFCLOC" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_MFCLOC_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?endif?>
      <?if $(var.VCRedist_OpenMP) = "yes" ?>
      <Merge Id="VCRedist_OpenMP" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_OpenMP_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?endif?>
      <?if $(var.VCRedist_CXXAMP) = "yes" ?>
      <Merge Id="VCRedist_CXXAMP" SourceFile="$(env.programfiles)\Common Files\Merge Modules\Microsoft_VC$(var.VCRedist)_CXXAMP_$(var.Platform).msm" DiskId="1" Language="0"/>
      <?endif?>
      <?endif?>
    </Directory>

    <!-- Set install path to the previous installation directory -->
    <Property Id="INSTALLDIR">
      <RegistrySearch Id="RegInstallPath"
                      Type="raw"
                      Root="HKLM"
                      Key="Software\$(var.ManufacturerName)\$(var.ProductName)"
                      Name="Path"
                      Win64="$(var.Win64)"
                      />
    </Property>

    <?ifdef MSIFASTINSTALL?>
    <Property Id="MSIFASTINSTALL">$(var.MSIFASTINSTALL)</Property>
    <?endif?>

    <!-- Save and restore INSTALLDIR -->
    
    <!-- 
         Save the command line value INSTALLDIR and restore it later in the sequence or
         it will be overwritten by the value saved to the registry during an upgrade.
         http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/
    -->
    <CustomAction Id="SaveCmdLineValueINSTALLDIR"
                  Property="CMDLINE_INSTALLDIR"
                  Value="[INSTALLDIR]"
                  Execute="firstSequence" />
    <CustomAction Id="SetFromCmdLineValueINSTALLDIR"
                  Property="INSTALLDIR"
                  Value="[CMDLINE_INSTALLDIR]"
                  Execute="firstSequence" />
    <InstallUISequence>
      <Custom Action="SaveCmdLineValueINSTALLDIR" Before="AppSearch" />
      <Custom Action="SetFromCmdLineValueINSTALLDIR" After="AppSearch">
        CMDLINE_INSTALLDIR
      </Custom>
    </InstallUISequence>
    <InstallExecuteSequence>
      <Custom Action="SaveCmdLineValueINSTALLDIR" Before="AppSearch" />
      <Custom Action="SetFromCmdLineValueINSTALLDIR" After="AppSearch">
        CMDLINE_INSTALLDIR
      </Custom>
    </InstallExecuteSequence>

    <!-- Write Installation Path to registry -->
    <DirectoryRef Id="INSTALLDIR">
      <Component Id="RegValueProductInstallPath" Guid="*" Win64="$(var.Win64)">
        <RegistryValue Id="RegValueInstallPath"
                       Root="HKLM"
                       Key="Software\$(var.ManufacturerName)\$(var.ProductName)"
                       Name="Path"
                       Value="[INSTALLDIR]"
                       Type="string"
                       KeyPath="yes"/>
      </Component>
    </DirectoryRef>

    <!-- Features -->
    <Feature Id="RootFeature"
             ConfigurableDirectory="INSTALLDIR"
             Title="$(var.ProductName)"
             Display="expand"
             Absent="disallow"
             Level="1"
             AllowAdvertise="no">
      <ComponentRef Id="RegValueProductInstallPath" />
      <FeatureGroupRef Id="ProductFeatures" />
    </Feature>
  </Product>
</Wix>

